/*
 * The barebones version of the Network States game w/o MUD. Allows players to
 * spawn into a small grid with 10 troops, then move those troops around to
 * conquer surrounding territories.
 *
 * Warning. Generated by GPT4, so there are errors.
 */
pragma solidity ^0.8.0;

contract NetworkStates {
    // Stores relevant values for one cell on the grid
    struct Tile {
        address owner;
        uint256 resources;
    }

    // Game state represented as a 20x20 grid of tiles
    uint256 constant GRID_SIZE = 20;
    Tile[GRID_SIZE][GRID_SIZE] public grid;

    // Check if the tile is unowned
    modifier isUnowned(uint256 x, uint256 y) {
        require(grid[x][y].owner == address(0), "Tile already owned");
        _;
    }

    // Check if the tile is owned by the sender
    modifier isOwnedBySender(uint256 x, uint256 y) {
        require(grid[x][y].owner == msg.sender, "Tile not owned by sender");
        _;
    }

    // Spawn player on the grid with 10 troops to mess around with
    function spawn(uint256 x, uint256 y) external isUnowned(x, y) {
        grid[x][y].owner = msg.sender;
        grid[x][y].resources = 10;
    }

    // Move troops from at a Tile to a neighboring Tile
    function move(
        uint256 fromX,
        uint256 fromY,
        uint256 toX,
        uint256 toY,
        uint256 amount
    ) external isOwnedBySender(fromX, fromY) {
        // Cannot spin up resources from thin air 
        require(
            amount <= grid[fromX][fromY].resources,
            "Not enough resources"
        );

        // Must move one square in the cardinal plane
        require(
            (fromX == toX && (fromY == toY + 1 || fromY == toY - 1)) ||
                (fromY == toY && (fromX == toX + 1 || fromX == toX - 1)),
            "Not an adjacent tile"
        );

        if (grid[toX][toY].owner == address(0)) {
            // Moving onto an unowned tile
            grid[toX][toY].owner = msg.sender;
            grid[toX][toY].resources = amount;
            grid[fromX][fromY].resources -= amount;
        }
        else if (grid[toX][toY].owner != msg.sender) {
            // Moving onto an enemy tile
            if (amount > grid[toX][toY].resources) {
                // Conquered successfully
                grid[toX][toY].owner = msg.sender;
                grid[toX][toY].resources = amount - grid[toX][toY].resources;
            } else {
                // Not enough to conquer 
                grid[toX][toY].resources -= amount;
            }
            grid[fromX][fromY].resources -= amount;
        }
        else {
            // Moving onto your own tile
            grid[toX][toY].resources += amount;
            grid[fromX][fromY].resources -= amount;
        }
    }
}
